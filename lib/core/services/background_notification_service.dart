import 'dart:async';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:workmanager/workmanager.dart';
import 'base_notification_service.dart';
import 'secure_api_service.dart';

class BackgroundNotificationService extends BaseNotificationService {
  static const String _taskName = 'processNotifications';
  static final SupabaseClient _supabase = Supabase.instance.client;

  /// Initialiser le service de notifications en arri√®re-plan
  static Future<void> initialize() async {
    try {
      BaseNotificationService.logInfo(
          'üîÑ Initialisation du service de notifications en arri√®re-plan...');

      // Initialiser WorkManager
      await Workmanager().initialize(
        callbackDispatcher,
        isInDebugMode: true,
      );

      // Programmer une t√¢che p√©riodique pour traiter les notifications
      await _scheduleNotificationProcessing();

      BaseNotificationService.logSuccess(
          '‚úÖ Service de notifications en arri√®re-plan initialis√©');
    } catch (e) {
      BaseNotificationService.logError(
          '‚ùå Erreur initialisation service arri√®re-plan: $e');
    }
  }

  /// Programmer le traitement p√©riodique des notifications
  static Future<void> _scheduleNotificationProcessing() async {
    try {
      // Annuler les t√¢ches existantes
      await Workmanager().cancelAll();

      // Programmer une t√¢che p√©riodique (toutes les 15 minutes minimum sur Android)
      await Workmanager().registerPeriodicTask(
        _taskName,
        _taskName,
        frequency: const Duration(minutes: 15),
        constraints: Constraints(
          networkType: NetworkType.connected,
        ),
      );

      BaseNotificationService.logInfo(
          'üìÖ T√¢che p√©riodique programm√©e: $_taskName');
    } catch (e) {
      BaseNotificationService.logError('‚ùå Erreur programmation t√¢che: $e');
    }
  }

  /// Traiter les notifications en arri√®re-plan de mani√®re s√©curis√©e
  static Future<void> processNotifications() async {
    try {
      BaseNotificationService.logInfo(
          'üîÑ Traitement s√©curis√© des notifications en arri√®re-plan...');

      final result = await SecureApiService.processNotificationsSecurely();

      if (result != null) {
        BaseNotificationService.logSuccess(
            '‚úÖ Notifications arri√®re-plan trait√©es: ${result['success']} succ√®s, ${result['errors']} erreurs');
      } else {
        BaseNotificationService.logWarning(
            '‚ö†Ô∏è Aucun r√©sultat du traitement arri√®re-plan');
      }
    } catch (e) {
      BaseNotificationService.logError(
          '‚ùå Erreur traitement notifications arri√®re-plan: $e');
    }
  }

  // Autres m√©thodes existantes...
}

/// Callback pour les t√¢ches en arri√®re-plan
@pragma('vm:entry-point')
void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    try {
      BaseNotificationService.logInfo('üîÑ Ex√©cution t√¢che arri√®re-plan: $task');

      switch (task) {
        case BackgroundNotificationService._taskName:
          await BackgroundNotificationService.processNotifications();
          break;
        default:
          BaseNotificationService.logWarning('‚ö†Ô∏è T√¢che inconnue: $task');
      }

      return Future.value(true);
    } catch (e) {
      BaseNotificationService.logError('‚ùå Erreur t√¢che arri√®re-plan: $e');
      return Future.value(false);
    }
  });
}
