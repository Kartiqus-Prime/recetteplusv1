import 'dart:convert';
import 'dart:io';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

// Handler pour les messages en arri√®re-plan
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('üì± Message re√ßu en arri√®re-plan: ${message.messageId}');

  // Traiter le message en arri√®re-plan
  await PushNotificationService._showNotification(message);
}

class PushNotificationService {
  static final FirebaseMessaging _firebaseMessaging =
      FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();
  static final SupabaseClient _supabase = Supabase.instance.client;

  // Callback pour la navigation
  static Function(String)? onNotificationTap;

  /// Initialiser le service de notifications push
  static Future<void> initialize() async {
    try {
      print('üöÄ Initialisation des notifications push...');

      // Initialiser Firebase
      await Firebase.initializeApp();
      print('‚úÖ Firebase initialis√©');

      // Configurer le handler pour les messages en arri√®re-plan
      FirebaseMessaging.onBackgroundMessage(
          _firebaseMessagingBackgroundHandler);

      // Initialiser les notifications locales
      await _initializeLocalNotifications();
      print('‚úÖ Notifications locales initialis√©es');

      // Demander les permissions
      await _requestPermissions();
      print('‚úÖ Permissions demand√©es');

      // Configurer les listeners
      await _setupMessageHandlers();
      print('‚úÖ Listeners configur√©s');

      // Obtenir et sauvegarder le token FCM
      await _getFCMToken();
      print('‚úÖ Token FCM obtenu');

      print('‚úÖ Notifications push initialis√©es avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation des notifications: $e');
    }
  }

  /// Initialiser les notifications locales
  static Future<void> _initializeLocalNotifications() async {
    // Utiliser votre ic√¥ne personnalis√©e
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_notification');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    final initialized = await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );

    print('üîî Notifications locales initialis√©es: $initialized');

    // Cr√©er le canal de notification Android
    if (Platform.isAndroid) {
      await _createNotificationChannel();
    }
  }

  /// Cr√©er le canal de notification Android
  static Future<void> _createNotificationChannel() async {
    const channel = AndroidNotificationChannel(
      'recette_plus_notifications',
      'Recette+ Notifications',
      description: 'Notifications de l\'application Recette+',
      importance: Importance.high,
      enableVibration: true,
      playSound: true,
    );

    final androidPlugin =
        _localNotifications.resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>();

    if (androidPlugin != null) {
      await androidPlugin.createNotificationChannel(channel);
      print('üì¢ Canal de notification cr√©√©: ${channel.id}');
    }
  }

  /// Demander les permissions
  static Future<void> _requestPermissions() async {
    // Permissions Firebase
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
      provisional: false,
    );

    print('üîê Permissions Firebase: ${settings.authorizationStatus}');

    // Permissions syst√®me Android
    if (Platform.isAndroid) {
      final status = await Permission.notification.request();
      print('üîê Permissions Android: $status');

      // V√©rifier si les permissions sont accord√©es
      if (status.isDenied) {
        print('‚ö†Ô∏è Permissions de notification refus√©es');
      } else if (status.isPermanentlyDenied) {
        print('‚ö†Ô∏è Permissions de notification d√©finitivement refus√©es');
      } else {
        print('‚úÖ Permissions de notification accord√©es');
      }
    }
  }

  /// Configurer les handlers de messages
  static Future<void> _setupMessageHandlers() async {
    // Messages re√ßus quand l'app est au premier plan
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üì± Message re√ßu au premier plan: ${message.notification?.title}');
      print('üì± Corps du message: ${message.notification?.body}');
      print('üì± Donn√©es: ${message.data}');
      _showNotification(message);
    });

    // Messages re√ßus quand l'app est en arri√®re-plan mais pas ferm√©e
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print(
          'üì± App ouverte depuis notification: ${message.notification?.title}');
      _handleNotificationTap(message.data);
    });

    // V√©rifier si l'app a √©t√© ouverte depuis une notification
    RemoteMessage? initialMessage =
        await _firebaseMessaging.getInitialMessage();
    if (initialMessage != null) {
      print(
          'üì± App lanc√©e depuis notification: ${initialMessage.notification?.title}');
      _handleNotificationTap(initialMessage.data);
    }
  }

  /// Obtenir et sauvegarder le token FCM
  static Future<String?> _getFCMToken() async {
    try {
      String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        print('üîë Token FCM: ${token.substring(0, 50)}...');
        await _saveTokenToDatabase(token);

        // √âcouter les changements de token
        _firebaseMessaging.onTokenRefresh.listen(_saveTokenToDatabase);
      }
      return token;
    } catch (e) {
      print('‚ùå Erreur lors de l\'obtention du token: $e');
      return null;
    }
  }

  /// Sauvegarder le token dans la base de donn√©es
  static Future<void> _saveTokenToDatabase(String token) async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è Utilisateur non connect√©, token non sauvegard√©');
        return;
      }

      await _supabase.from('user_fcm_tokens').upsert({
        'user_id': user.id,
        'fcm_token': token,
        'platform': Platform.isAndroid ? 'android' : 'ios',
        'updated_at': DateTime.now().toIso8601String(),
      });

      print('‚úÖ Token FCM sauvegard√© en base pour ${user.email}');
    } catch (e) {
      print('‚ùå Erreur sauvegarde token: $e');
    }
  }

  /// Afficher une notification locale avec votre ic√¥ne
  static Future<void> _showNotification(RemoteMessage message) async {
    try {
      print('üîî Tentative d\'affichage de notification...');

      const androidDetails = AndroidNotificationDetails(
        'recette_plus_notifications',
        'Recette+ Notifications',
        channelDescription: 'Notifications de l\'application Recette+',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_notification', // Votre ic√¥ne personnalis√©e
        largeIcon: DrawableResourceAndroidBitmap('@mipmap/ic_notification'),
        color: Color(0xFF4CAF50),
        enableVibration: true,
        playSound: true,
        showWhen: true,
        when: null,
        styleInformation: BigTextStyleInformation(''),
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final title = message.notification?.title ?? 'Recette+';
      final body = message.notification?.body ?? 'Nouvelle notification';
      final id = message.hashCode;

      print('üîî Affichage notification: $title - $body');

      await _localNotifications.show(
        id,
        title,
        body,
        details,
        payload: jsonEncode(message.data),
      );

      print('‚úÖ Notification affich√©e avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur affichage notification: $e');
    }
  }

  /// Afficher une notification √† partir de donn√©es (pour Supabase realtime)
  static Future<void> showNotificationFromData(
      Map<String, dynamic> data) async {
    try {
      print('üîî Affichage notification depuis donn√©es Supabase...');

      const androidDetails = AndroidNotificationDetails(
        'recette_plus_notifications',
        'Recette+ Notifications',
        channelDescription: 'Notifications temps r√©el de Recette+',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_notification', // Votre ic√¥ne personnalis√©e
        largeIcon: DrawableResourceAndroidBitmap('@mipmap/ic_notification'),
        color: Color(0xFF4CAF50),
        enableVibration: true,
        playSound: true,
        showWhen: true,
        styleInformation: BigTextStyleInformation(''),
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final notification = data['notification'] ?? {};
      final title = notification['title'] ?? 'Recette+';
      final body = notification['body'] ?? 'Nouvelle notification';
      final id = DateTime.now().millisecondsSinceEpoch ~/ 1000;

      print('üîî Affichage notification Supabase: $title - $body');

      await _localNotifications.show(
        id,
        title,
        body,
        details,
        payload: jsonEncode(data['data'] ?? {}),
      );

      print('‚úÖ Notification Supabase affich√©e avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur affichage notification Supabase: $e');
    }
  }

  /// G√©rer le tap sur une notification locale
  static void _onNotificationTap(NotificationResponse response) {
    print('üëÜ Notification tapp√©e: ${response.payload}');
    if (response.payload != null) {
      try {
        final data = jsonDecode(response.payload!);
        _handleNotificationTap(data);
      } catch (e) {
        print('‚ùå Erreur parsing payload: $e');
      }
    }
  }

  /// G√©rer la navigation depuis une notification
  static void _handleNotificationTap(Map<String, dynamic> data) {
    print('üîó Navigation depuis notification: $data');

    // Utiliser le callback si d√©fini
    if (onNotificationTap != null) {
      final route = data['route'] ?? '/notifications';
      onNotificationTap!(route);
      return;
    }
  }

  /// Envoyer une notification de test LOCALE avec votre ic√¥ne
  static Future<void> sendTestLocalNotification() async {
    try {
      print('üß™ Envoi notification locale de test...');

      const androidDetails = AndroidNotificationDetails(
        'recette_plus_notifications',
        'Recette+ Notifications',
        channelDescription: 'Notifications de test',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_notification', // Votre ic√¥ne personnalis√©e
        largeIcon: DrawableResourceAndroidBitmap('@mipmap/ic_notification'),
        color: Color(0xFF4CAF50),
        enableVibration: true,
        playSound: true,
        styleInformation: BigTextStyleInformation(
            'Ceci est une notification de test avec votre logo personnalis√© !'),
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final now = DateTime.now();
      await _localNotifications.show(
        now.millisecondsSinceEpoch ~/ 1000,
        'üß™ Test Recette+ avec Logo',
        'Notification avec votre ic√¥ne personnalis√©e √† ${now.hour}:${now.minute.toString().padLeft(2, '0')}',
        details,
        payload: jsonEncode({'type': 'test', 'route': '/notifications'}),
      );

      print('‚úÖ Notification locale de test envoy√©e avec ic√¥ne personnalis√©e');
    } catch (e) {
      print('‚ùå Erreur envoi notification locale: $e');
    }
  }

  /// V√©rifier les permissions et l'√©tat des notifications
  static Future<Map<String, dynamic>> checkNotificationStatus() async {
    final status = <String, dynamic>{};

    try {
      // V√©rifier les permissions Android
      if (Platform.isAndroid) {
        final permission = await Permission.notification.status;
        status['android_permission'] = permission.toString();
        status['android_granted'] = permission.isGranted;
      }

      // V√©rifier les permissions Firebase
      final settings = await _firebaseMessaging.getNotificationSettings();
      status['firebase_permission'] = settings.authorizationStatus.toString();
      status['firebase_granted'] =
          settings.authorizationStatus == AuthorizationStatus.authorized;

      // V√©rifier le token FCM
      final token = await _firebaseMessaging.getToken();
      status['fcm_token'] = token != null;
      status['fcm_token_preview'] = token?.substring(0, 20) ?? 'null';

      // V√©rifier l'utilisateur connect√©
      final user = _supabase.auth.currentUser;
      status['user_connected'] = user != null;
      status['user_email'] = user?.email ?? 'null';

      print('üìä Status des notifications: $status');
    } catch (e) {
      print('‚ùå Erreur v√©rification status: $e');
      status['error'] = e.toString();
    }

    return status;
  }

  /// Obtenir le token FCM actuel
  static Future<String?> getCurrentToken() async {
    return await _firebaseMessaging.getToken();
  }

  /// Supprimer le token de la base de donn√©es (d√©connexion)
  static Future<void> removeToken() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return;

      await _supabase.from('user_fcm_tokens').delete().eq('user_id', user.id);

      print('üóëÔ∏è Token FCM supprim√©');
    } catch (e) {
      print('‚ùå Erreur suppression token: $e');
    }
  }
}
