import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../../main.dart';

class AuthService {
  // URL de callback pour la redirection depuis Supabase
  static const String callbackUrl = 'com.recetteplus.app://auth-callback/';
  
  static Future<bool> signInWithGoogle(BuildContext context) async {
    try {
      debugPrint('üîÑ D√©but de la connexion Google...');
      
      // R√©cup√©rer le client ID depuis les variables d'environnement
      final googleClientId = dotenv.env['GOOGLE_WEB_CLIENT_ID'];
      
      if (googleClientId == null || googleClientId.isEmpty) {
        debugPrint('‚ùå GOOGLE_WEB_CLIENT_ID non d√©fini dans .env');
        _showErrorDialog(context, 'Configuration manquante', 'GOOGLE_WEB_CLIENT_ID non d√©fini dans le fichier .env');
        return false;
      }
      
      debugPrint('‚úÖ Client ID Google trouv√©: ${googleClientId.substring(0, 20)}...');

      // Initialiser GoogleSignIn avec le client ID
      final GoogleSignIn googleSignIn = GoogleSignIn(
        scopes: ['email', 'profile'],
        serverClientId: googleClientId,
      );
      
      debugPrint('üîÑ Initialisation GoogleSignIn termin√©e');
      
      // D√©connecter l'utilisateur pr√©c√©dent si n√©cessaire
      await googleSignIn.signOut();
      debugPrint('üîÑ D√©connexion pr√©c√©dente effectu√©e');
      
      // D√©clencher le flux de connexion Google
      debugPrint('üîÑ Ouverture du s√©lecteur de compte Google...');
      final GoogleSignInAccount? googleUser = await googleSignIn.signIn();
      
      if (googleUser == null) {
        debugPrint('‚ö†Ô∏è Connexion Google annul√©e par l\'utilisateur');
        return false;
      }
      
      debugPrint('‚úÖ Utilisateur Google s√©lectionn√©: ${googleUser.email}');
      
      // Obtenir les d√©tails d'authentification de la requ√™te
      debugPrint('üîÑ R√©cup√©ration des tokens d\'authentification...');
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      
      debugPrint('‚úÖ Tokens r√©cup√©r√©s:');
      debugPrint('  - ID Token: ${googleAuth.idToken != null ? "‚úÖ Pr√©sent" : "‚ùå Absent"}');
      debugPrint('  - Access Token: ${googleAuth.accessToken != null ? "‚úÖ Pr√©sent" : "‚ùå Absent"}');
      
      if (googleAuth.idToken == null) {
        debugPrint('‚ùå ID Token manquant');
        _showErrorDialog(context, 'Erreur d\'authentification', 'Impossible d\'obtenir le token d\'authentification Google');
        return false;
      }
      
      debugPrint('üîÑ Connexion √† Supabase avec les tokens Google...');
      
      // Connecter l'utilisateur √† Supabase avec les informations d'identification Google
      final AuthResponse res = await supabase.auth.signInWithIdToken(
        provider: OAuthProvider.google,
        idToken: googleAuth.idToken!,
        accessToken: googleAuth.accessToken,
      );
      
      debugPrint('üìä R√©ponse Supabase:');
      debugPrint('  - Session: ${res.session != null ? "‚úÖ Cr√©√©e" : "‚ùå Nulle"}');
      debugPrint('  - User: ${res.user != null ? "‚úÖ ${res.user!.email}" : "‚ùå Nul"}');
      
      if (res.session != null && res.user != null) {
        debugPrint('üéâ Connexion Supabase r√©ussie pour ${res.user!.email}');
        return true;
      } else {
        debugPrint('‚ùå √âchec de la connexion Supabase - Session ou User nul');
        _showErrorDialog(context, 'Erreur Supabase', 'Impossible de cr√©er la session utilisateur');
        return false;
      }
    } on Exception catch (e) {
      debugPrint('üí• Exception lors de la connexion avec Google: $e');
      
      // Gestion sp√©cifique des erreurs Google Sign In
      if (e.toString().contains('ApiException: 10:')) {
        _showErrorDialog(
          context, 
          'Erreur de configuration', 
          'Configuration Google incorrecte.\n\nV√©rifiez :\n‚Ä¢ L\'empreinte SHA-1 dans Google Cloud Console\n‚Ä¢ Le package name (com.recetteplus.app)\n‚Ä¢ Le Client ID dans le fichier .env'
        );
      } else if (e.toString().contains('sign_in_failed')) {
        _showErrorDialog(
          context, 
          'Connexion √©chou√©e', 
          'La connexion Google a √©chou√©. V√©rifiez votre configuration.'
        );
      } else {
        _showErrorDialog(
          context, 
          'Erreur inattendue', 
          'Une erreur inattendue s\'est produite : ${e.toString()}'
        );
      }
      return false;
    } catch (e, stackTrace) {
      debugPrint('üí• Erreur lors de la connexion avec Google: $e');
      debugPrint('üìç Stack trace: $stackTrace');
      _showErrorDialog(context, 'Erreur', 'Une erreur s\'est produite lors de la connexion');
      return false;
    }
  }

  static void _showErrorDialog(BuildContext context, String title, String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  static Future<void> signOut() async {
    try {
      debugPrint('üîÑ D√©connexion en cours...');
      
      // D√©connecter de Google Sign In
      final GoogleSignIn googleSignIn = GoogleSignIn();
      await googleSignIn.signOut();
      debugPrint('‚úÖ D√©connexion Google termin√©e');
      
      // D√©connecter de Supabase
      await supabase.auth.signOut();
      debugPrint('‚úÖ D√©connexion Supabase termin√©e');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©connexion: $e');
    }
  }

  static Future<AuthResponse?> signInWithPassword({
    required String email,
    required String password,
  }) async {
    try {
      return await supabase.auth.signInWithPassword(
        email: email,
        password: password,
      );
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la connexion: $e');
      return null;
    }
  }

  static Future<AuthResponse?> signUp({
    required String email,
    required String password,
  }) async {
    try {
      return await supabase.auth.signUp(
        email: email,
        password: password,
        emailRedirectTo: callbackUrl,
      );
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'inscription: $e');
      return null;
    }
  }

  static Future<void> resetPassword(String email) async {
    await supabase.auth.resetPasswordForEmail(
      email,
      redirectTo: callbackUrl,
    );
  }
}
