import 'dart:async';
import 'dart:convert';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:workmanager/workmanager.dart';
import 'push_notification_service.dart';

class BackgroundNotificationService {
  static const String _taskName = 'processNotifications';
  static final SupabaseClient _supabase = Supabase.instance.client;

  /// Initialiser le service de notifications en arri√®re-plan
  static Future<void> initialize() async {
    try {
      print('üîÑ Initialisation du service de notifications en arri√®re-plan...');

      // Initialiser WorkManager
      await Workmanager().initialize(
        callbackDispatcher,
        isInDebugMode: true,
      );

      // Programmer une t√¢che p√©riodique pour traiter les notifications
      await _scheduleNotificationProcessing();

      print('‚úÖ Service de notifications en arri√®re-plan initialis√©');
    } catch (e) {
      print('‚ùå Erreur initialisation service arri√®re-plan: $e');
    }
  }

  /// Programmer le traitement p√©riodique des notifications
  static Future<void> _scheduleNotificationProcessing() async {
    try {
      // Annuler les t√¢ches existantes
      await Workmanager().cancelAll();

      // Programmer une t√¢che p√©riodique (toutes les 15 minutes minimum sur Android)
      await Workmanager().registerPeriodicTask(
        _taskName,
        _taskName,
        frequency: const Duration(minutes: 15),
        constraints: Constraints(
          networkType: NetworkType.connected,
        ),
      );

      print('üìÖ T√¢che p√©riodique programm√©e: $_taskName');
    } catch (e) {
      print('‚ùå Erreur programmation t√¢che: $e');
    }
  }

  /// Traiter les notifications en arri√®re-plan
  static Future<void> processNotifications() async {
    try {
      print('üîÑ Traitement des notifications en arri√®re-plan...');

      // Appeler l'Edge Function pour traiter les notifications
      final response = await _supabase.functions.invoke(
        'send-push-notification',
        method: HttpMethod.post,
      );

      if (response.status == 200) {
        final data = response.data;
        print(
            '‚úÖ Notifications trait√©es: ${data['success']} succ√®s, ${data['errors']} erreurs');
      } else {
        print('‚ùå Erreur traitement notifications: ${response.status}');
      }
    } catch (e) {
      print('‚ùå Erreur traitement notifications: $e');
    }
  }

  /// Cr√©er une notification de test pour v√©rifier le syst√®me
  static Future<void> createTestBackgroundNotification() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        print('‚ùå Utilisateur non connect√©');
        return;
      }

      final now = DateTime.now();
      await _supabase.from('notifications').insert({
        'user_id': userId,
        'title': 'üöÄ Test Notification Arri√®re-plan',
        'content':
            'Cette notification devrait appara√Ætre m√™me si l\'app est ferm√©e ! Cr√©√©e √† ${now.hour}:${now.minute.toString().padLeft(2, '0')}',
        'type': 'test_background',
        'is_read': false,
        'priority': 'high',
        'icon': 'rocket_launch',
        'color': 'text-purple-500',
        'created_at': now.toIso8601String(),
        'updated_at': now.toIso8601String(),
      });

      // D√©clencher imm√©diatement le traitement
      await processNotifications();

      print('‚úÖ Notification de test arri√®re-plan cr√©√©e et trait√©e');
    } catch (e) {
      print('‚ùå Erreur cr√©ation test arri√®re-plan: $e');
    }
  }

  /// Arr√™ter le service
  static Future<void> stop() async {
    try {
      await Workmanager().cancelAll();
      print('üõë Service de notifications en arri√®re-plan arr√™t√©');
    } catch (e) {
      print('‚ùå Erreur arr√™t service: $e');
    }
  }
}

/// Callback pour les t√¢ches en arri√®re-plan
@pragma('vm:entry-point')
void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    try {
      print('üîÑ Ex√©cution t√¢che arri√®re-plan: $task');

      switch (task) {
        case BackgroundNotificationService._taskName:
          await BackgroundNotificationService.processNotifications();
          break;
        default:
          print('‚ö†Ô∏è T√¢che inconnue: $task');
      }

      return Future.value(true);
    } catch (e) {
      print('‚ùå Erreur t√¢che arri√®re-plan: $e');
      return Future.value(false);
    }
  });
}
